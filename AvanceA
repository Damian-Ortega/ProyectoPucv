#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <conio.h>

#define MAXREGION 16

struct Persona
{
	char *nombre;
	char *rut;
	int edad;
};

struct NodoPersona{

	struct Persona *persona;
	struct NodoPersona *sig,*ant;

};

struct Sede
{
	char *direccion;
	char *nombreRegion;
	int codigoSede;
	int cantidadPersonas;
	struct NodoPersona *persona;
};

struct NodoSede
{
	struct Sede *sede;
	struct NodoSede *sig;
};

struct Region
{
	char *nombre;
	int pLibre;
	int cantidadPersonas;
	struct NodoSede *sede;
};


/*
    ~Personas~
*/

struct Persona *crearPersona(char *,char *,int);
struct NodoPersona *crearNodoPersona(struct Persona **,struct NodoPersona *,struct NodoPersona *);
struct Persona *modificarPersona(struct Region **,char *,char *, int);
struct NodoPersona *buscarPersonaEnUnaSede(struct NodoPersona **head,char *rut);
struct NodoPersona *buscarPersonaEnSedes(struct Region **,char *);
int agregarPersona(struct Persona *,struct Persona *a,int,struct Region **);
int eliminarPersona(struct NodoPersona **,int,char *);

/*
	~Region~
*/

int crearRegion(struct Region **,char *,int);
struct Region *buscarRegion(struct Region **,char *);//revisar

/*
	~Sede~
*/

struct Sede *CrearSede(int codigo ,char *direccion,char *regionUbicada);
struct NodoSede *CrearNodoSede(struct Sede *,struct NodoSede *);
struct Sede *eliminarSede(struct Region **, int);
struct NodoSede *buscarSedeEnUnaRegion(struct NodoSede **,int *);
struct NodoSede *buscarSede(struct Region **,int );
struct Sede *ModificarSede(struct Region **,int ,char*);
int agregarSede(struct Sede *,struct NodoSede **, char *);

/*
    Funciones Extras
*/

int comprobarRut(char *rut);
int cantidadPersonasEnSede(struct Region **arreglo,int codigoSede);
void cuentaPersonasSede(struct NodoSede *head);

int main()
{
	
	
	struct Region *arreglo=(struct Region *)malloc(sizeof(struct Region)*MAXREGION);
	struct Region *regionBuscada;
	struct NodoSede *auxSede,headSede;
	struct Sede *nuevaSede, *elimSede, *modificado;
	struct Region *aux;
	struct Persona *auxPersona;
	struct NodoPersona *nuevoNodo,*buscado;
	int op,opcion,i,edad,codigoSede,agregado,eliminado,verifica;
	char buffer[30],buffer2[30],rut[9];
    struct Persona *nuevaPersona;

	arreglo->pLibre=0;

	do
	{
		printf("MENU");
		printf("1)Agregar \n");
		printf("2)ELiminar \n");
		printf("3)Modificar \n");
		printf("4)Buscar \n");
		printf("0)salir \n");
		scanf("%d",&op);

		system("cls");
		switch(op)
		{
			case 1:
				do
				{
					printf("1)Agregar Regi칩n\n");
					printf("2)Agregar Sede\n");
					printf("3)Agregar Persona\n");
					printf("0)Salir \n");
					scanf("%d",&opcion);
					system("cls");
					switch(opcion)
					{
						case 1:

							if(arreglo->pLibre==0)
							{
								printf("No se pueden agregar Mas Regiones");
							}
							else
							{
								printf("ingrese Nombre Region");
								scanf("%s",&buffer);
								if(buscarRegion(&arreglo,buffer)!=NULL){
									printf("La region ya existe");
								}
								else
								{
									verifica=crearRegion(&arreglo,buffer,arreglo->pLibre);

									if(verifica==1)
									{
										printf("Regi칩n agregada");
										arreglo->pLibre++;
									}
									else
									{
										printf("La region no se pudo agregar");	
									}	
										//free(buffer);
								}
								
							}
							
						break;
						case 2:

							printf("ingrese codigo de Sede");
							scanf("%d",&codigoSede);

							if(buscarSede(&arreglo,codigoSede) != NULL)
							{
								printf("La sede ya existe");
							}
							else
							{
								
								printf("ingrese Direccion");
								scanf("%s",&buffer);
								printf("ingrese Region en la que ubica la sede");
								scanf("%s",&buffer2);
								
								
								if(buscarRegion(&arreglo,buffer)==NULL){
									printf("La region no existe");
								}
								else
								{	
									nuevaSede=CrearSede(codigoSede,buffer2,buffer);
									if(agregarSede(nuevaSede,&arreglo->sede,buffer2)==1)
										printf("Sede Agregada Correctamente");
									else									
										printf("No se pudo agregar la Sede");
															
								}
								//free(buffer);
								//free(buffer2);
							}
								
						break;
						case 3:
							
							do
							{
								printf("\ningrese Rut");
								scanf("%s",&rut);
								if(comprobarRut(rut)==0)
								{
									printf("\nrut invalido");
									//free(rut);
								}
							}while(comprobarRut(buffer)!=0);

							if(buscarPersonaEnSedes(&arreglo,rut)!= NULL)
							{
								printf("La persona ya existe");
								exit(0);
							}
							printf("\nIngrese nombre");
							scanf("%s",&buffer);
							printf("\nIngrese edad");
							scanf("%d",&edad);
							printf("\nIngrese codigo de la sede");
							scanf("%d",&codigoSede);

							nuevaPersona=crearPersona(rut,buffer,edad);
							if(arreglo->sede->sede->persona==NULL)
							{
								nuevoNodo=crearNodoPersona(&nuevaPersona,NULL,NULL);
							}
							else
							{
								agregado=agregarPersona(nuevaPersona,NULL,codigoSede,&arreglo);
							}

							if(agregado==1)
							{
								printf("\nPersona agregado correctamente");
							}
							else
							{
								printf("\nNo se pudo agregar a la persona");
							}
							//free(buffer);
							//free(buffer2);
						break;
						case 0:
							exit(0);
						break;
						default:
							printf("opcion ingresada no valida");
						break;
					}

				}while(opcion!=0);



			break ;
			case 2:
				do
				{
					printf("1)ELiminar Sede\n");
					printf("2)ELiminar Persona\n");
					printf("0)Salir \n");
					scanf("%d",&opcion);
					system("cls");
					switch(opcion)
					{
						case 1:

							printf("ingrese Codigo de la sede");
							scanf("%d",&codigoSede);
							if(buscarSede(&arreglo,codigoSede)==NULL)
							{
								printf("La sede no se encuentra");
							}
							/*else
							{
								elimSede= eliminarSede(&arreglo,codigoSede);
							}
							//si se elimina una sede se deben distribuir los ni침os de la sede

							if(elimSede==NULL)
							{
								printf("No se pudo Eliminar");
							}
							else
							{
								printf("Sede Eliminada Correctamente");
							}

						break;
						case 2:


							do
							{
								free(rut);
								printf("ingrese rut sin puntos ni guion");
								scanf("%s",rut);
							}while(comprobarRut(rut)==0);

							if(buscarPersonaEnSedes(&arreglo,rut)!=NULL)
							{
								if(eliminarPersona(rut,&arreglo)!=NULL)
								{
									printf("La persona no se pudo eliminar");
								}
								else
								{
									printf("Persona eliminada correctamente");
								}
							}
						break;
						case 0:
							exit(0);
						break;
						default:
							printf("opcion ingresada no valida");
						break;
						*/
					}

				}while(opcion!=0);

			break ;
			case 3:
				do
				{
					printf("1)Modificar Sede\n");
					printf("2)Modificar Persona \n");
					printf("0)Salir \n");
					scanf("%d",&opcion);
					system("cls");
					switch(opcion)
					{
						case 1:

							printf("ingrese Codigo de la sede");
							scanf("%d",&codigoSede);
							if(buscarSede(&arreglo,codigoSede)==NULL)
							{
								printf("La sede no se encuentra");
							}
							else
							{
								printf("Ingrese Nueva Direccion ");
								scanf("%s",buffer);
								modificado=ModificarSede(&arreglo,codigoSede,buffer);

								if(modificado!=NULL)
								{
									printf("sede modificada correctamente");
								}
								else
								{
									printf("No se pudo modificar la sede");
								}
							}
							//free(buffer);
						break;
						case 2:
							do
							{
								printf("ingrese rut sin puntos y con guion");
								scanf("%s",&rut);
							}while(comprobarRut(rut)==0);

							if(buscarPersonaEnSedes(&arreglo,rut)==NULL)
							{
								printf("La persona no se encuentra registrada");
							}
							else
							{
								printf("ingrese nuevo Nombre");
								scanf("%s",&buffer);
								printf("ingrese nueva Edad");
								scanf("%d",edad);
								auxPersona=modificarPersona(&arreglo,rut,buffer,edad);

								if(auxPersona!=NULL)
								{
									printf("Persona modificada correctamente");
								}
								else
								{
									printf("No se pudo modificar la Persona");
								}
							}
							//free(buffer);
						break;
						case 0:
							exit(0);
						break;
						default:
							printf("opcion ingresada no valida");
						break;
					}

				}while(opcion!=0);
			break ;
			case 4:
				do
				{
					printf("1)Buscar Regi칩n\n");
					printf("2)Buscar Sede\n");
					printf("3)Buscar Persona\n");
					printf("0)Salir \n");
					scanf("%d",&opcion);
					system("cls");
					switch(opcion)
					{
						case 1:
							printf("ingrese nombre de la Region");
							scanf("%s",&buffer);

							aux=buscarRegion(&arreglo,buffer);

							if(aux==NULL)
							{
								printf("no se encontro la region o esta mal escrita");
							}
							else
							{
								printf("Region: %s\n",aux->nombre);
								//cantidad de sedes en region .. realizar el contador
								//printf("cantidad de Personas: %d\n",cantidadPersonasEnRegion(arreglo));
							}
							//free(buffer);
						break;
						case 2:
							printf("ingrese codigo de sede\n");
							scanf("%d",&codigoSede);

							auxSede=buscarSede(&arreglo,codigoSede);

							if(auxSede==NULL)
							{
								printf("no se encontro la sede \n");
							}
							else
							{
								printf("Codigo Sede: %d",codigoSede);
								printf("Direccion: %s",auxSede->sede->direccion);
								//printf("Cantidad de Personas en Sede: %d",cantidadPersonasEnSede(arreglo,codigoSede);

							}

						break;
						case 3:
							do
							{
								printf("ingrese Rut de la person sin puntos y con guion");
								scanf("%s",&rut);
							}while(comprobarRut(rut)==0);

							buscado=buscarPersonaEnSedes(&arreglo,rut);

							if(auxPersona==NULL)
							{
								printf("la persona no existe \n");
							}
							else
							{
								printf("RUT: %s",rut);
								printf("Nombre: %s",auxPersona->nombre);
								printf("Edad: %d",auxPersona->edad);
								//printf("puntaje Riesgo Social: %d",auxPersona->puntajeRiesgoSocial);
							}
						break;
						case 0:
							exit(0);
						break;
						default:
							printf("opcion ingresada no valida");
						break;
					}

				}while(opcion!=0);
			break ;
			case 0:
				exit(0);
			break ;
			default:
				printf("opcion ingreseda no valida");
			break ;
		}

	}while(op!=0);

}


//Funciones de personas

struct Persona *crearPersona(char *nombre,char *rut,int edad)
{
    struct Persona *nuevo;

    nuevo=(struct Persona*)malloc(sizeof(struct Persona));

    nuevo->nombre=(char *)malloc(strlen(nombre)*sizeof(char));
    strcpy(nuevo->nombre,nombre);
    nuevo->rut=(char *)malloc(strlen(rut)*sizeof(char));
    strcpy(nuevo->rut,rut);
    nuevo->edad=edad;

    return nuevo;
}

struct NodoPersona *crearNodoPersona(struct Persona **nuevo,struct NodoPersona *sig,struct NodoPersona *ant)
{
    struct NodoPersona *nuevoNodo;
    nuevoNodo=(struct NodoPersona *)malloc(sizeof(struct NodoPersona ));
    nuevoNodo->persona=*nuevo;
    nuevoNodo->sig=sig;
    nuevoNodo->ant=ant;

    return nuevoNodo;
}

int agregarPersona(struct Persona *nuevo,struct Persona *ant,int codigoSede,struct Region **regiones)
{
    struct NodoSede *sede=buscarSede(regiones,codigoSede);
    struct NodoPersona *rec;
	
    rec=sede->sede->persona;
    
    if((rec->sig==NULL) && (rec->ant==NULL))
    {
    	rec->persona=nuevo;
    	sede->sede->cantidadPersonas++;
    	return 1;
	}
    
    if(rec!=NULL)
    {
    	while(rec != NULL)
    	{
			rec=rec->sig;
		}
		rec->persona=nuevo;
		sede->sede->cantidadPersonas++;
		
		return 1;
	}
    
    return 0;
}

struct NodoPersona *buscarPersonaEnUnaSede(struct NodoPersona **head,char *rut)
{
    struct NodoPersona *rec;

    rec=*head;

    while(rec!=NULL)
    {
        if(strcmp(rut,rec->persona->rut)==0)
        {
            return rec;
        }
        rec=rec->sig;
    }

    return NULL;
}

struct NodoPersona *buscarPersonaEnSedes(struct Region **regiones,char *rut)
{
    struct NodoSede *rec;
    int i;
    for(i=0;i<MAXREGION;i++)
    {
        rec=regiones[i]->sede;

        while(rec!=NULL)
        {
            if(buscarPersonaEnUnaSede(&rec->sede->persona,rut)!=NULL)
            {
                return buscarPersonaEnUnaSede(&rec->sede->persona,rut);
            }
            rec=rec->sig;
        }
    }
    
    return NULL;
}

struct Persona *modificarPersona(struct Region **arreglo,char *rut, char *nombre, int edad)
{
	struct NodoPersona *buscado = buscarPersonaEnSedes(arreglo,rut);
	
	if(buscado!= NULL)
	{
		buscado->persona->nombre=nombre;
		buscado->persona->edad=edad;
		
		return buscado->persona;
	}
	
	return NULL;
}

int eliminarPersona(struct NodoPersona **lista,int codigoSede,char *rut)
{
    struct NodoPersona *rec;

    rec=*lista;

    while(rec!=NULL)
    {
        if(rec->persona!=NULL && strcmp(rut,rec->persona->rut)==0)
        {
            if(rec->ant == NULL)
            {
                if(rec->sig==NULL)
                {
                    *lista=NULL;
                    return 1;
                }
                *lista=rec->sig;
                free(rec);
                return 1;
            }
            if(rec->sig==NULL)
            {
                free(rec->sig);
                rec==NULL;
            }else{
                rec->ant->sig=rec->sig;
                rec->sig->ant=rec->ant;
                free(rec);
                return 1;
            }
        }
        rec=rec->sig;
    }
    return 0;
}

//Funciones de region

int crearRegion(struct Region **arreglo,char *nombre,int pLibre) //crea los la region , verifica si hay espacio para agregar y agrega al arreglo.
{
	struct Region *nuevo=(struct Region *)malloc(sizeof(struct Region));
	int i;

	nuevo->nombre=(char*)malloc(sizeof(char *));
	strcpy(nuevo->nombre,nombre);

	nuevo->sede =NULL;

	for(i=0;i<=pLibre;i++)
	{
		if(arreglo[i]==NULL)
		{
		//	arreglo[i]=nuevo;
		//	arreglo->pLibre=arreglo->pLibre + 1;
			return 1;
		}
	}
	return 0;//el arreglo esta lleno
}

struct Region *buscarRegion(struct Region **arreglo,char *nombre)
{
	int i;

	for(i=0;i<MAXREGION;i++)
	{
		if((strcmp(arreglo[i]->nombre,nombre)) == 0)
		{
			return arreglo[i];
		}
	}
	return NULL;

}

//Funciones Sedes

struct Sede *CrearSede(int codigo ,char *direccion,char *regionUbicada)
{
	struct Sede *nuevo=(struct Sede*)malloc(sizeof(struct Sede));

	nuevo->codigoSede=codigo;
	nuevo->direccion=(char*)malloc(sizeof(char*));
	strcpy(nuevo->direccion,direccion);
	nuevo->nombreRegion=(char*)malloc(sizeof(char*));
	strcpy(nuevo->nombreRegion,regionUbicada);

	nuevo->persona= NULL;

	return nuevo;

}

struct NodoSede *CrearNodoSede(struct Sede *nuevo,struct NodoSede *sig)
{
	struct NodoSede *nodo=(struct NodoSede*)malloc(sizeof(struct NodoSede));
	nodo->sede=nuevo;
	nodo->sig=sig;

	return nodo;
}

struct NodoSede *buscarSedeEnUnaRegion(struct NodoSede *head,int codigoSede)
{
    struct NodoSede *rec;

    rec=head;

    while(rec!=NULL)
    {
        if(rec->sede->codigoSede == codigoSede)
        {
            return rec;
        }

        rec=rec->sig;
    }

    return NULL;
}

struct NodoSede *buscarSede(struct Region **regiones,int codigoSede)
{
    int i;

    for(i=0;i<MAXREGION;i++)
    {
        if(buscarSedeEnUnaRegion(regiones[i]->sede,codigoSede)!=NULL)
        {
            return buscarSedeEnUnaRegion(regiones[i]->sede,codigoSede);
        }
    }

    return NULL;
}

struct Sede *ModificarSede(struct Region **arreglo,int codigoSede, char *direccion)
{
	struct NodoSede *buscado=buscarSede(arreglo,codigoSede);
	
	buscado->sede->direccion = direccion;
	
	return buscado->sede;
}

int agregarSede(struct Sede *nuevo,struct NodoSede **head)
{
    struct NodoSede *rec;
    rec=*head;

    while(rec!=NULL)
    {
        rec=rec->sig;
    }

    rec=CrearNodoSede(nuevo,NULL);

    return 1;
}

int comprobarRut (char *rut) // arreglar
{
	int i;
	for(i=0;i<8;i++)
	{
		if(!isdigit(rut[i]))
		{
			return 0;
		}
	}
	if(rut[8]!='-')
	{
		return 0;
	}
	if(!isdigit(rut[9]) && rut[9]!='k')
	{
		return 0;
	}
	return 1;
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <conio.h>

#define MAX 10000
#define MAXREGION 16

struct Persona
{
	char *nombre;
	char *rut;
	int edad;
	int puntajeRiesgoSocial;
};


struct NodoPersona{

	struct Persona *persona;
	struct NodoPersona *sig,*ant;

};

struct Sede
{
	char *direccion;
	int codigoSede;
	struct NodoPersona *persona;
};

struct NodoSede
{
	struct Sede *sede;
	struct NodoSede *sig;
};

struct Region
{
	char *Nombre;
	int pLibre;
	struct Sede *sede;
};


/*
    ~Personas~
*/

struct Persona *crearPersona(char *nombre,char *rut,int edad);
struct Persona *eliminarPersona(char *rut,struct NodoPersona *head);
struct Persona *modificarPersona(char *rut);
struct Persona *buscarPersona(char *rut,struct NodoPersona *head);
int agregarPersona(struct Persona *nuevo,struct NodoPersona *head);


/*
	~Region~
*/

int crearRegion(struct Region *arreglo,char *nombre,int pLibre);
int eliminarRegion(struct Region *arreglo,char *nombre);
int hayRegiones(struct Region *arreglo);
struct Region *Buscar Region(struct Region *arreglo,char *nombre);

/*
	~Sede~
*/

struct Sede *CrearSede(int codigo ,char *direccion);
struct NodoSede *CrearNodoSede(struct Sede *nuevo,struct NodoSede *sig);
struct NodoSede *EliminarSede(struct  NodoSede *lista, int codigo);
struct NodoSede *buscarSede(struct NodoSede *head ,int codigoSede);
int agregarSede(struct Sede *nuevo,struct Nodosede *head);

/*
    Funciones Extras
*/

int comprobarRut(char *rut);
int cantidadPersonasEnSede(struct Region **arreglo,int codigoSede);
void cuentaPersonasSede(struct NodoSede *head);


int main()
{
	struct Region *arreglo=(struct Region *)malloc(sizeof(struct Region)*MAXREGION);
	struct nodoSede *elimSede;
	int op,opcion,i,edad,codigoSede,agregado,eliminado;
	char buffer[30],buffer2[30];
	
	arreglo->pLibre=0;
	
	do
	{
		printf("MENU");
		printf("1)Agregar \n");
		printf("2)ELiminar \n");
		printf("3)Modificar \n");
		printf("4)Buscar \n");
		printf("0)salir \n");
		scanf("%d",&op);
		
		system("cls");
		switch(op)
		{	
			case 1:
				do
				{
					printf("1)Agregar Región\n");
					printf("2)Agregar Sede\n");
					printf("3)Agregar Persona\n");
					printf("0)Salir \n");
					scanf("%d",&opcion);
					system("cls");
					switch(opcion)
					{
						case 1:

							if(hayRegiones(arreglo)==0)
							{
								printf("No se pueden agregar Mas Regiones");
							}
							else
							{
								printf("ingrese Nombre Region");
								scanf("%s",&buffer);
								crearRegion(arreglo,buffer,arreglo->pLibre);
								
								printf("Región agregada");
							}
							free(buffer);
						break;
						case 2:
							
							printf("ingrese codigo de Sede");
							scanf("%d",&codigoSede);
							
							if(buscarSede(arreglo->sede,codigoSede) != NULL)
							{
								printf("El Codigo ya existe");
								exit(0);
							}
							
							printf("ingrese Direccion");
							scanf("%s",&buffer);
							print("ingrese Region en la que ubica la sede");
							scanf("%s",&buffer2);
							
							nuevo=crearSede(codigoSede,buffer,buffer2);
							if(agregarSede(nuevo,arreglo->sede)==1)
							{
								printf("Sede Agregada Correctamente");
							}
							else
							{
								print("No se pudo agregar la Sede");
							}
							free(buffer);
							free(buffer2);
						break;
						case 3:
						
							struct Persona *nuevo;
							struct NodoPersona *nuevoNodo;	
							do
							{
								printf("\ningrese Rut");
								scanf("%s",&buffer);
								if(comprobarRut(buffer)==0)
								{
									printf("\nrut invalido");
									free(buffer);
								}
							}while(comprobarRut(buffer)!=0)
							
							if(buscarPersona(char *rut,struct NodoPersona *head)!= NULL)
							{
								printf("La persona ya existe");
								exit(0);
							}
							printf("\nIngrese nombre");
							scanf("%s",&buffer2);
							printf("\nIngrese edad");
							scanf("%d",&edad);
							
							nuevo=crearPersona(buffer,buffer2,edad);
							if(arreglo->sede->persona==NULL)
							{
								nuevoNodo=crearNodoPersona(nuevo,nuevoNodo->sig,nuevoNodo->ant);
								agregado=agregarPersona(nuevo,nuevoNodo);
							}
							else
							{
								agragado=agregarPersona(nuevo,arreglo->sede->persona);
							}
							
							if(agregado==1)
							{
								printf("\nPersona agregado correctamente");
							}
							else
							{
								printf("\nNo se pudo agregar a la persona");
							}
							free(buffer);
							free(buffer2);
						break;
						case 0:
							exit(0);
						break;
						default:
							printf("opcion ingresada no valida");
						break;
					}
					
				}while(opcion!=0);
				
				
				
			break ;
			case 2:
				do
				{
					printf("1)ELiminar Región\n");
					printf("2)ELiminar Sede\n");
					printf("3)ELiminar Persona\n");
					printf("0)Salir \n");
					scanf("%d",&opcion);
					system("cls");
					switch(opcion)
					{
						case 1:
							
							printf("ingrese Nombre de la region");
							scanf("%s",&buffer);
							if(buscarRegion(arreglo,buffer)==NULL)
							{
								printf("La region no se encuentra");
							}
							else
							{
								eliminado=eliminarRegion(arreglo,buffer);
							}
							
							if(elimando==1)
							{
								printf("region eliminada Correctamente");
							}
							else
							{
								printf("No se puedo eliminar la región")	
							}
							free(buffer);
						break;
						case 2:
							
							printf("ingrese Codigo de la sede");
							scanf("%d",&codigoSede);
							if(buscarSede(arreglo,codigoSede)==NULL)
							{
								printf("La sede no se encuentra");
							}
							else
							{
								elimSede=EliminarSede(arreglo,codigoSede);
							}
							 //si se elimina una sede se deben distribuir los niños de la sede
							
							if(elimSede==NULL)
							{
								prinf("No se pudo Eliminar")
							}
							else
							{
								printf("Sede Eliminada Correctamente");
							}
							
						break;
						case 3:
						break;
						case 0:
							exit(0);
						break;
						default:
							printf("opcion ingresada no valida");
						break;
					}
					
				}while(opcion!=0);
				
			break ;
			case 3:
				do
				{
					printf("1)Modificar Región\n");
					printf("2)Modificar Sede\n");
					printf("3)Modificar Persona\n");
					printf("0)Salir \n");
					scanf("%d",&opcion);
					system("cls");
					switch(opcion)
					{
						case 1:
						break;
						case 2:
						break;
						case 3:
						break;
						case 0:
							exit(0);
						break;
						default:
							printf("opcion ingresada no valida");
						break;
					}
					
				}while(opcion!=0);
			break ;
			case 4:
				do
				{
					printf("1)Buscar Región\n");
					printf("2)Buscar Sede\n");
					printf("3)Buscar Persona\n");
					printf("0)Salir \n");
					scanf("%d",&opcion);
					system("cls");
					switch(opcion)
					{
						case 1:
						break;
						case 2:
						break;
						case 3:
						break;
						case 0:
							exit(0);
						break;
						default:
							printf("opcion ingresada no valida");
						break;
					}
					
				}while(opcion!=0);
			break ;
			case 0:
				exit(0);
			break ;
			default:
				printf("opcion ingreseda no valida");
			break ;
		}
			
	}while(op!=0);
	
		
}

struct Persona *crearPersona(char *nombre,char *rut,int edad)
{
    struct Persona *nuevo;

    nuevo=(struct Persona*)malloc(sizeof(struct Persona));

    nuevo->nombre=(char *)malloc(strlen(nombre)*sizeof(char));
    strcpy(nuevo->nombre,nombre);
    nuevo->rut=(char *)malloc(strlen(rut)*sizeof(char));
    strcpy(nuevo->rut,rut);
    nuevo->edad=edad;

    return nuevo;
};

struct NodoPersona *crearNodoPersona(struct Persona *nuevo,struct NodoPersona *sig,nodoPersona *ant)
{
    struct NodoPersona nuevoNodo;
    nuevoNodo=(struct NodoPersona*)malloc(sizeof(struct NodoPersona));
    nuevoNodo->persona=nuevo;
    nuevoNodo->sig=sig;
    nuevoNodo->ant=ant;

    return nuevoNodo;
}


struct Persona *buscarPersona(char *rut,struct NodoPersona *head)
{
    struct NodoPersona *rec;
    rec=head;

    while(rec!=NULL)
    {
        if(strcmp(rec->persona->rut,rut)==0)
        {
            return rec;
        }

        rec=rec->sig;
    }

    return NULL;
}

int agregarPersona(struct Persona *nuevo,struct NodoPersona *head)
{
    struct NodoPersona *rec;
    rec=head;

    while(rec!=NULL)
    {
        rec=rec->sig;
    }

    rec=crearNodoPersona(nuevo,NULL,rec->ant);

    return 1;
}



int crearRegion(struct Region *arreglo,char *nombre,int pLibre)
{
	struct Region *nuevo=(struct Sede *)malloc(sizeof(struct Sede));

	nuevo->nombre=(char*)malloc(sizeof(char *));
	strcpy(nuevo->nombre,nombre);
	nuevo->codigoSede=codigo;

	nuevo->sede =NULL;

	for(i=0;i<=pLibre;i++)
	{
		if(arreglo[i]==NULL)
		{
			arrelgo[i]=nuevo;
			arreglo->pLibre++;
			return 1
		}
	}
	return 0;//el arreglo esta lleno
}

int eliminarRegion(struct Region *arreglo,char *nombre)
{
	int i;

	for(i=0;i<arreglo->pLibre;i++)
	{
		if((strcmp(arreglo[i]->Nombre,nombre))==0)
		{
			arreglo[i]=arreglo[arreglo->pLibre-1];
			arreglo[arreglo->pLibre-1]=NULL;
			arreglo->pLibre--;
			return 1;
		}
	}
	return 0; //no se encontro la Region
}

struct Region *buscarRegion(struct Region *arreglo,char *nombre)
{
	int i;
	
	for(i=0;i<MAXREGION;i++)
	{
		if((strcmp(arreglo[i]->Nombre,nombre)) == 0)
		{
			return arreglo[i];
		}
	}
	return NULL;
	
}

int hayRegiones(struct Region *arreglo)
{
	int i;
	
	for(i=0;i<MAXREGION;i++)
	{
		if(arreglo[i]==NULL)
		{
			return 1;
		}
	}
	return 0;
}

struct Sede *CrearSede(int codigo ,char *direccion,char *regionUbicada)
{
	struct Sede *nuevo=(struct Sede*)malloc(sizeof(struct Sede));

	nuevo->codigoSede=codigo;
	nuevo->direccion=(char*)malloc(sizeof(char*));
	strcpy(nuevo->direccion,direccion);
	nuevo->region=(char*)malloc(sizeof(char*));
	strcpy(nuevo->region,regionUbicada);

	nuevo->persona=null;

	return nuevo;

}

struct NodoSede *CrearNodoSede(struct Sede *nuevo,struct NodoSede *sig)
{
	struct NodoSede *nodo=(struct NodoSede*)malloc(sizeof(struct NodoSede));
	nodo->sede=nuevo;
	nodo->sig=sig;

	return nodo;
}

int agregarSede(struct Sede *nuevo,struct Nodosede *head)
{
    struct NodoSede *rec;
    rec=head;

    while(rec=!NULL)
    {
        rec=rec->sig;
    }

    rec=crearNodoSede(nuevo,NULL);

    return 1;
}

struct NodoSede *EliminarSede(struct  NodoSede *lista, int codigo)
{
	struct NodoSede *tmp=lista;
	struct NodoSede *aux;

	if(tmp->sede->codigoSede== codigo)
	{
		lista=lista->sig;
		free(tmp);
	}
	else
	{
		tmp=buscarSede(lista,codigo);
		
		free(tmp->sig);
		tmp->sig = tmp->sig->sig;
	}
	return lista;

}

int comprobarRut (char *rut)
{
	int i;
	for(i=0;i<8;i++)
	{
		if(!isdigit(rut[i]))
		{
			return 0;
		}
	}
	if(rut[8]!='-')
	{
		return 0;
	}
	if(!isdigit(rut[9]) && rut[9]!='k')
	{
		return 0;
	}
	return 1;
}

int cantidadPersonasEnSede(struct Region **arreglo,int codigoSede)
{
	int i,aux;
	struct NodoSede *tmp;

	for(i=0;i<arreglo->pLibre;i++)//recorremos el arreglo de Regiones
	{
		if(buscarSede(arreglo[i]->sede,codigoSede)!=NULL)
		{
			tmp= buscarSede(arreglo[i]->sede,codigoSede);

			aux=cuentaPersonasSede(tmp);
		}
	}
	return aux;
}
struct NodoSede *buscarSede(struct NodoSede *head ,int codigo)
{
	struct NodoSede *rec=head;

	if(head!=NULL)
	{
		while(rec!=NULL)
		{
			if(rec->sede->codigoSede==codigo)
			{
				return rec->sede;
			}
			rec=rec->sig;
		}
	}
	return NULL;
}
int cuentaPersonasSede(struct NodoSede *head)
{
	int contador=0;
	struct NodoSede *rec=head;
	while(rec!=NULL)
	{
		rec=rec->sig;
		contador++;
	}

	return contador;
}

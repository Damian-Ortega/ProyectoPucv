#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define MAX 10000

struct Persona
{
	char *nombre;
	char *rut;
	int edad;
	int puntajeRiesgoSocial;
};


struct NodoPersona{

	struct Persona *persona;
	struct NodoPersona *sig,*ant;

};

struct Sede
{
	char *direccion;
	int codigoSede;
	struct NodoPersona *persona;
};

struct NodoSede
{
	struct Sede *sede;
	struct NodoSede *sig;
};

struct Region
{
	char *Nombre;
	int pLibre;
	struct Sede *sede;
};


/*
    ~Personas~
*/

struct Persona *crearPersona(char *nombre,char *rut,int edad);
struct Persona *eliminarPersona(char *rut,struct NodoPersona *head);
struct Persona *modificarPersona(char *rut,);
struct Persona *buscarPersona(char *rut,struct NodoPersona *head);
int agregarPersona(struct Persona *nuevo,struct NodoPersona *head);


/*
	~Region~
*/

int crearRegion(struct Region *arreglo,char *nombre,int pLibre);
int eliminarRegion(struct Region *arreglo,char *nombre, int pLibre);

/*
	~Sede~
*/

struct Sede *CrearSede(int codigo ,char *direccion);
struct NodoSede *CrearNodoSede(struct Sede *nuevo,struct NodoSede *sig);
struct NodoSede *EliminarSede(struct  NodoSede *lista, int codigo);
struct NodoSede *buscarSede(struct NodoSede *head ,int codigo);
int agregarSede(struct Sede *nuevo,struct Nodosede *head);

/*
    Funciones Extras
*/

int comprobarRut(char *rut);
int cantidadPersonasEnSede(struct Region **arreglo,int codigoSede);
void cuentaPersonasSede(struct NodoSede *head);


int main()
{

}

struct Persona *crearPersona(char *nombre,char *rut,int edad)
{
    struct Persona *nuevo;

    nuevo=(struct Persona*)malloc(sizeof(struct Persona));

    nuevo->nombre=(char *)malloc(strlen(nombre)*sizeof(char));
    strcpy(nuevo->nombre,nombre);
    nuevo->rut=(char *)malloc(strlen(rut)*sizeof(char));
    strcpy(nuevo->rut,rut);
    nuevo->edad=edad;

    return nuevo;
};

struct NodoPersona *crearNodoPersona(struct Persona *nuevo,struct NodoPersona *sig,nodoPersona *ant)
{
    struct NodoPersona nuevoNodo;
    nuevoNodo=(struct NodoPersona*)malloc(sizeof(struct NodoPersona));
    nuevoNodo->persona=nuevo;
    nuevoNodo->sig=sig;
    nuevoNodo->ant=ant;

    return nuevoNodo;
}


struct Persona *buscarPersona(char *rut,struct NodoPersona *head)
{
    struct NodoPersona *rec;
    rec=head;

    while(rec!=NULL)
    {
        if(strcmp(rec->persona->rut,rut)==0)
        {
            return rec;
        }

        rec=rec->sig;
    }

    return NULL;
}

int agregarPersona(struct Persona *nuevo,struct NodoPersona *head)
{
    struct NodoPersona *rec;
    rec=head;

    while(rec!=NULL)
    {
        rec=rec->sig;
    }

    rec=crearNodoPersona(nuevo,NULL,rec->ant);

    return 1;
}



int crearRegion(struct Region *arreglo,char *nombre,int pLibre)
{
	struct Region *nuevo=(struct Sede *)malloc(sizeof(struct Sede));

	nuevo->nombre=(char*)malloc(sizeof(char *));
	strcpy(nuevo->nombre,nombre);
	nuevo->codigoSede=codigo;

	nuevo->sede =NULL;
	nuevo->pLibre=0;

	for(i=0;i<=pLibre;i++)
	{
		if(arreglo[i]==NULL)
		{
			arrelgo[i]=nuevo;
			return 1
		}
	}
	return 0;//el arreglo esta lleno
}

int eliminarRegion(struct Region *arreglo,char *nombre, int pLibre)
{
	int i;

	for(i=0;i<pLibre;i++)
	{
		if((strcmp(arreglo[i]->Nombre,nombre))==0)
		{
			arreglo[i]=arreglo[pLibre-1];
			arreglo[pLibre-1]=NULL;
			return 1;
		}
	}
	return 0; //no se encontro la Region
}

struct Sede *CrearSede(int codigo ,char *direccion)
{
	struct Sede *nuevo=(struct Sede*)malloc(sizeof(struct Sede));

	nuevo->codigoSede=codigo;
	nuevo->direccion=(char*)malloc(sizeof(char*));
	strcpy(nuevo->direccion,direccion);

	nuevo->persona=null;

	return nuevo;

}

struct NodoSede *CrearNodoSede(struct Sede *nuevo,struct NodoSede *sig)
{
	struct NodoSede *nodo=(struct NodoSede*)malloc(sizeof(struct NodoSede));
	nodo->sede=nuevo;
	nodo->sig=sig;

	return nodo;
}

int agregarSede(struct Sede *nuevo,struct Nodosede *head)
{
    struct NodoSede *rec;
    rec=head;

    while(rec=!NULL)
    {
        rec=rec->sig;
    }

    rec=crearNodoSede(nuevo,NULL);

    return 1;
}

struct NodoSede *EliminarSede(struct  NodoSede *lista, int codigo)
{
	struct NodoSede *tmp=lista;

	if(tmp->sede->codigoSede== codigo)
	{
		lista=lista->sig;
		free(tmp);
	}
	else
	{
		while(tmp->sig->sede->codigoSede != codigo)
		{
			tmp=tmp->sig;
		}
		free(tmp->sig);
		tmp->sig = tmp->sig->sig;
	}
	return lista;

}

int comprobarRut (char *rut)
{
	int i;
	for(i=0;i<8;i++)
	{
		if(!isdigit(rut[i]))
		{
			return 0;
		}
	}
	if(rut[8]!='-')
	{
		return 0;
	}
	if(!isdigit(rut[9]) && rut[9]!='k')
	{
		return 0;
	}
	return 1;
}

int cantidadPersonasEnSede(struct Region **arreglo,int codigoSede)
{
	int i;
	struct NodoSede *tmp;

	for(i=0;i<arreglo->pLibre;i++)//recorremos el arreglo de Regiones
	{
		if(buscarSede(arreglo[i]->sede,codigoSede)!=NULL)
		{
			tmp= buscarSede(arreglo[i]->sede,codigoSede);

			cuentaPersonasSede(tmp);
		}
	}
	return NULL;
}
struct NodoSede *buscarSede(struct NodoSede *head ,int codigo)
{
	struct NodoSede *rec=head;

	if(head!=NULL)
	{
		while(rec!=NULL)
		{
			if(rec->sede->codigoSede==codigo)
			{
				return rec->sede;
			}
			rec=rec->sig;
		}
	}
	return NULL;
}

void cuentaPersonasSede(struct NodoSede *head)
{
	int contador=0;
	struct NodoSede *rec=head;
	while(rec!=NULL)
	{
		rec=rec->sig;
		contador++;
	}

	printf("En esta sede hay %d Personas registradas",contador);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <conio.h>

#define MAX 10000
#define MAXREGION 16

struct Persona
{
	char *nombre;
	char *rut;
	int edad;
};

struct NodoPersona{

	struct Persona *persona;
	struct NodoPersona *sig,*ant;

};

struct Sede
{
	char *direccion;
	char *nombreRegion;
	int codigoSede;
	struct NodoPersona *persona;
};

struct NodoSede
{
	struct Sede *sede;
	struct NodoSede *sig;
};

struct Region
{
	char *nombre;
	int pLibre;
	struct NodoSede *sede;
};


/*
    ~Personas~
*/

struct Persona *crearPersona(char *nombre,char *rut,int edad);
struct Persona *eliminarPersona(struct Region **regiones,char *rut); //falta
struct Persona *modificarPersona(char *rut);//falta
struct Persona *buscarPersonaEnUnaSede(struct NodoPersona *head,char *rut);
struct Persona *buscarPersonaEnSedes(struct Region **regiones,char *rut);
struct NodoPersona *crearNodoPersona(struct Persona *nuevo,struct NodoPersona *sig,struct NodoPersona *ant);
int agregarPersona(struct Persona *nuevo,struct Persona *ant,int codigoSede,struct Region **regiones);

/*
	~Region~
*/

int crearRegion(struct Region *arreglo,char *nombre,int pLibre);
int eliminarRegion(struct Region *arreglo,char *nombre);
int hayRegiones(struct Region *arreglo);
struct Region *buscarRegion(struct Region *arreglo,char *nombre);

/*
	~Sede~
*/

struct Sede *CrearSede(int codigo ,char *direccion,char *regionUbicada);
struct NodoSede *CrearNodoSede(struct Sede *nuevo,struct NodoSede *sig);
struct NodoSede *EliminarSede(struct  NodoSede *lista, int codigo);
struct NodoSede *buscarSede(struct NodoSede *head ,int codigo);
struct Sede *ModificarSede(struct nodoSede *head,int codigo);
int agregarSede(struct Sede *nuevo,struct NodoSede *head);

/*
    Funciones Extras
*/

int comprobarRut(char *rut);
int cantidadPersonasEnSede(struct Region **arreglo,int codigoSede);
void cuentaPersonasSede(struct NodoSede *head);

int main()
{
	struct Region *arreglo=(struct Region *)malloc(sizeof(struct Region)*MAXREGION);
	struct NodoSede *auxSede;
	struct Sede *nuevo;
	struct Region *aux;
	struct Persona *auxPersona;
	struct NodoPersona nuevoNodo;
	int op,opcion,i,edad,codigoSede,agregado,eliminado;
	char buffer[30],buffer2[30],rut[9];
	
	arreglo->pLibre=0;
	
	do
	{
		printf("MENU");
		printf("1)Agregar \n");
		printf("2)ELiminar \n");
		printf("3)Modificar \n");
		printf("4)Buscar \n");
		printf("0)salir \n");
		scanf("%d",&op);
		
		system("cls");
		switch(op)
		{	
			case 1:
				do
				{
					printf("1)Agregar Regi칩n\n");
					printf("2)Agregar Sede\n");
					printf("3)Agregar Persona\n");
					printf("0)Salir \n");
					scanf("%d",&opcion);
					system("cls");
					switch(opcion)
					{
						case 1:

							if(hayRegiones(arreglo)==0)
							{
								printf("No se pueden agregar Mas Regiones");
							}
							else
							{
								printf("ingrese Nombre Region");
								scanf("%s",&buffer);
								crearRegion(arreglo,buffer,arreglo->pLibre);
								
								printf("Regi칩n agregada");
							}
							free(buffer);
						break;
						case 2:
							
							printf("ingrese codigo de Sede");
							scanf("%d",&codigoSede);
							
							if(buscarSede(arreglo->sede,codigoSede) != NULL)
							{
								printf("El Codigo ya existe");
								exit(0);
							}
							
							printf("ingrese Direccion");
							scanf("%s",&buffer);
							printf("ingrese Region en la que ubica la sede");
							scanf("%s",&buffer2);
							
							nuevo=CrearSede(codigoSede,buffer,buffer2);
							if(agregarSede(nuevo,arreglo->sede)==1)
							{
								printf("Sede Agregada Correctamente");
							}
							else
							{
								printf("No se pudo agregar la Sede");
							}
							free(buffer);
							free(buffer2);
						break;
						case 3:
						
							struct Persona *nuevo;
							struct NodoPersona *nuevoNodo;	
							do
							{
								printf("\ningrese Rut");
								scanf("%s",&rut);
								if(comprobarRut(rut)==0)
								{
									printf("\nrut invalido");
									free(rut);
								}
							}while(comprobarRut(buffer)!=0);
							
							if(buscarPersonaEnSedes(&arreglo,rut)!= NULL)
							{
								printf("La persona ya existe");
								exit(0);
							}
							printf("\nIngrese nombre");
							scanf("%s",&buffer);
							printf("\nIngrese edad");
							scanf("%d",&edad);
							
							nuevo=crearPersona(rut,buffer,edad);
							if(arreglo->sede->persona==NULL)
							{
								nuevoNodo=crearNodoPersona(nuevo,nuevoNodo->sig,nuevoNodo->ant);
								agregado=agregarPersona(nuevo,nuevoNodo);
							}
							else
							{
								agragado=agregarPersona(nuevo,arreglo->sede->persona);
							}
							
							if(agregado==1)
							{
								printf("\nPersona agregado correctamente");
							}
							else
							{
								printf("\nNo se pudo agregar a la persona");
							}
							free(buffer);
							free(buffer2);
						break;
						case 0:
							exit(0);
						break;
						default:
							printf("opcion ingresada no valida");
						break;
					}
					
				}while(opcion!=0);
				
				
				
			break ;
			case 2:
				do
				{
					printf("1)ELiminar Sede\n");
					printf("2)ELiminar Persona\n");
					printf("0)Salir \n");
					scanf("%d",&opcion);
					system("cls");
					switch(opcion)
					{
						case 1:
							
							printf("ingrese Codigo de la sede");
							scanf("%d",&codigoSede);
							if(buscarSede(arreglo,codigoSede)==NULL)
							{
								printf("La sede no se encuentra");
							}
							else
							{
								elimSede=EliminarSede(arreglo,codigoSede);
							}
							 //si se elimina una sede se deben distribuir los ni침os de la sede
							 
							if(elimSede==NULL)
							{
								printf("No se pudo Eliminar");
							}
							else
							{
								printf("Sede Eliminada Correctamente");
							}
							
						break;
						case 2:
							
							do
							{	
								free(rut);
								printf("ingrese rut sin puntos ni guion");
								scanf("%s",rut);
							}while(comprobarRut(rut)==0);
							
							if(buscarPersona(rut,arreglo->sede->persona)!=NULL)
							{
								if(eliminarPersona(rut,&&arreglo)!=NULL)
								{
									printf("La persona no se pudo eliminar");
								}
								else
								{
									printf("Persona eliminada correctamente");
								}
							}
						break;
						case 0:
							exit(0);
						break;
						default:
							printf("opcion ingresada no valida");
						break;
					}
					
				}while(opcion!=0);
				
			break ;
			case 3:
				do
				{
					printf("1)Modificar Sede\n");
					printf("2)Modificar Persona \n");
					printf("0)Salir \n");
					scanf("%d",&opcion);
					system("cls");
					switch(opcion)
					{
						case 1:
								
							printf("ingrese Codigo de la sede");
							scanf("%d",&codigoSede);
							if(buscarSede(arreglo,codigoSede)==NULL)
							{
								printf("La sede no se encuentra");
							}
							else
							{	
								printf("Ingrese Nueva Direccion ");
								scanf("%s",buffer);
								modifaicado=ModificarSede(&&arreglo,codigoSede,buffer);
								
								if(modificado=1)
								{
									printf("sede modificada correctamente");
								}
								else
								{
									printf("No se pudo modificar la sede");
								}
							}
							free(buffer);
						break;
						case 2:
							do
							{
								printf("ingrese rut sin puntos y con guion");
								scanf("%s",&rut);
							}while(comprobarRut(rut)==0);
							
							if(buscarPersonaEnSedes(arreglo,rut)==NULL)
							{
								printf("La persona no se encuentra registrada");
							}
							else
							{
								printf("ingrese nuevo Nombre");
								scanf("%s",&buffer);
								printf("ingrese nueva Edad");
								scanf("%d",edad);
								modificado=modificarPersona(rut,&&arreglo,buffer,edad);	
								
								if(modificado=1)
								{
									printf("Persona modificada correctamente");
								}
								else
								{
									printf("No se pudo modificar la Persona");
								}
							}
							free(buffer);
						break;
						case 0:
							exit(0);
						break;
						default:
							printf("opcion ingresada no valida");
						break;
					}
					
				}while(opcion!=0);
			break ;
			case 4:
				do
				{
					printf("1)Buscar Regi칩n\n");
					printf("2)Buscar Sede\n");
					printf("3)Buscar Persona\n");
					printf("0)Salir \n");
					scanf("%d",&opcion);
					system("cls");
					switch(opcion)
					{
						case 1:
							printf("ingrese nombre de la Region");
							scanf("%s",&buffer);
							
							aux=buscarRegion(arreglo,buffer);
							
							if(aux==NULL)
							{
								printf("no se encontro la region o esta mal escrita");
							}
							else
							{
								printf("Region: %s\n",aux->Nombre);
								printf("Cantidad de sedes: %d\n",cantidadSedeEnRegion(arreglo,buffer));
								printf("cantidad de Personas: %d\n",cantidadPersonasEnRegion(arreglo));
							}
							free(buffer);
						break;
						case 2:
							printf("ingrese codigo de sede\n");
							scanf("%d",&codigoSede);
							
							auxSede=buscarSede(arreglo,codigo)
							
							if(auxSede==NULL)
							{
								printf("no se encontro la sede \n");
							}
							else
							{
								printf("Codigo Sede: %d",codigoSede);
								printf("Direccion: %s",auxSede->sede->direccion);
								printf("Cantidad de Personas en Sede: %d",cantidadPersonasEnSede(arreglo,codigoSede);
								
							}
							
						break;
						case 3:
							do
							{
								printf("ingrese Rut de la person sin puntos y con guion");
								scanf("%s",&rut);
							}while(comprobarRut(rut)==0);
							
							auxPersona=buscarPersona(rut,arreglo);
							
							if(auxPersona==NULL)
							{
								printf("la persona no existe \n");
							}
							else
							{
								printf("RUT: %s",rut);
								printf("Nombre: %s",auxPersona->nombre);
								printf("Edad: %d",auxPersona->edad);
								printf("puntaje Riesgo Social: %d",auxPersona->puntajeRiesgoSocial);
							}
						break;
						case 0:
							exit(0);
						break;
						default:
							printf("opcion ingresada no valida");
						break;
					}
					
				}while(opcion!=0);
			break ;
			case 0:
				exit(0);
			break ;
			default:
				printf("opcion ingreseda no valida");
			break ;
		}
			
	}while(op!=0);
	
		
}

//Funciones de personas

struct Persona *crearPersona(char *nombre,char *rut,int edad)
{
    struct Persona *nuevo;

    nuevo=(struct Persona*)malloc(sizeof(struct Persona));

    nuevo->nombre=(char *)malloc(strlen(nombre)*sizeof(char));
    strcpy(nuevo->nombre,nombre);
    nuevo->rut=(char *)malloc(strlen(rut)*sizeof(char));
    strcpy(nuevo->rut,rut);
    nuevo->edad=edad;

    return nuevo;
};



struct NodoPersona *crearNodoPersona(struct Persona *nuevo,struct NodoPersona *sig,struct NodoPersona *ant)
{
    struct NodoPersona *nuevoNodo;
    nuevoNodo=(struct NodoPersona*)malloc(sizeof(struct NodoPersona));
    nuevoNodo->persona=nuevo;
    nuevoNodo->sig=sig;
    nuevoNodo->ant=ant;

    return nuevoNodo;
}

int agregarPersona(struct Persona *nuevo,struct Persona *ant,int codigoSede,struct Region **regiones)
{
    struct NodoPersona *rec;

    rec=(buscarSedeEnRegiones(regiones,codigoSede));
    rec=rec->persona;

    if(buscarPersonaEnSedes(regiones,nuevo->rut)!=NULL)
    {
        return 0;
    }

    if(rec==NULL)
    {
        rec=crearNodoPersona(nuevo,NULL,NULL);
    }
    else
    {
        while(rec!=NULL)
        {
            rec=rec->sig;
        }
        rec=crearNodoPersona(nuevo,NULL,rec->ant);
    }

    return 1;
}

struct Persona *buscarPersonaEnUnaSede(struct NodoPersona *head,char *rut)
{
    struct NodoPersona *rec;

    rec=head;

    while(rec!=NULL)
    {
        if(strcasecmp(rut,rec->persona->rut)==0)
        {
            return rec;
        }
        rec=rec->sig;
    }

    return NULL;
}

struct Persona *buscarPersonaEnSedes(struct Region **regiones,char *rut)
{
    struct NodoSede *rec;
    int i;

    for(i=0;i<MAXREGION;i++)
    {
        rec=regiones[i]->sede;

        while(rec!=NULL)
        {
            if(buscarPersonaEnUnaSede(rec->sede->persona,rut)!=NULL)
            {
                return buscarPersonaEnUnaSede(rec->sede->persona,rut);
            }
            rec=rec->sig;
        }
    }
};

int *eliminarPersona(struct NodoPersona **lista,int codigoSede,char *rut)
{
    struct NodoPersona *rec;

    rec=*lista;

    while(rec!=NULL)
    {
        if(rec->persona!=NULL && strcmp(rut,rec->persona->rut)==0)
        {
            if(rec->ant == NULL)
            {
                if(rec->sig==NULL)
                {
                    *lista=NULL;
                    return 1;
                }
                *lista=rec->sig;
                free(rec);
                return 1;
            }
            if(rec->sig==NULL)
            {
                free(rec->sig);
                rec==NULL;
            }else{
                rec->ant->sig=rec->sig;
                rec->sig->ant=rec->ant;
                free(rec);
                return 1;
            }
        }
        rec=rec->sig;
    }
    return 0;
}

//Funciones de region

int crearRegion(struct Region *arreglo,char *nombre,int pLibre)
{
	struct Region *nuevo=(struct Sede *)malloc(sizeof(struct Sede));

	nuevo->nombre=(char*)malloc(sizeof(char *));
	strcpy(nuevo->nombre,nombre);
	nuevo->codigoSede=codigo;

	nuevo->sede =NULL;

	for(i=0;i<=pLibre;i++)
	{
		if(arreglo[i]==NULL)
		{
			arrelgo[i]=nuevo;
			arreglo->pLibre++;
			return 1
		}
	}
	return 0;//el arreglo esta lleno
}

struct Region *buscarRegion(struct Region *arreglo,char *nombre)
{
	int i;

	for(i=0;i<MAXREGION;i++)
	{
		if((strcmp(arreglo[i]->Nombre,nombre)) == 0)
		{
			return arreglo[i];
		}
	}
	return NULL;

}

//Funciones Sedes

struct Sede *CrearSede(int codigo ,char *direccion,char *regionUbicada)
{
	struct Sede *nuevo=(struct Sede*)malloc(sizeof(struct Sede));

	nuevo->codigoSede=codigo;
	nuevo->direccion=(char*)malloc(sizeof(char*));
	strcpy(nuevo->direccion,direccion);
	nuevo->region=(char*)malloc(sizeof(char*));
	strcpy(nuevo->region,regionUbicada);

	nuevo->persona=null;

	return nuevo;

}

struct NodoSede *CrearNodoSede(struct Sede *nuevo,struct NodoSede *sig)
{
	struct NodoSede *nodo=(struct NodoSede*)malloc(sizeof(struct NodoSede));
	nodo->sede=nuevo;
	nodo->sig=sig;

	return nodo;
}

struct Sede *buscarSedeEnUnaRegion(struct NodoSede *head,int codigoSede)
{
    struct NodoSede *rec;

    rec=head;

    while(rec!=NULL)
    {
        if(rec->sede->codigoSede == codigoSede)
        {
            return rec;
        }

        rec=rec->sig;
    }

    return NULL;
};

struct Sede *buscarSedeEnRegiones(struct Region **regiones,int codigoSede)
{
    int i;

    for(i=0;i<MAXREGIONES;i++)
    {
        if(buscarSedeEnUnaRegion(regiones[i]->sede,codigoSede)!=NULL)
        {
            return buscarSedeEnUnaRegion(regiones[i]->sede,codigoSede);
        }
    }

    return NULL;
};

struct NodoSede *EliminarSede(struct  NodoSede *lista, int codigo)
{
	struct NodoSede *tmp=lista;
	struct NodoSede *aux;

	if(tmp->sede->codigoSede== codigo)
	{
		lista=lista->sig;
		free(tmp);
	}
	else
	{
		tmp=buscarSede(lista,codigo);

		free(tmp->sig);
		tmp->sig = tmp->sig->sig;
	}
	return lista;

}

int comprobarRut (char *rut)
{
	int i;
	for(i=0;i<8;i++)
	{
		if(!isdigit(rut[i]))
		{
			return 0;
		}
	}
	if(rut[8]!='-')
	{
		return 0;
	}
	if(!isdigit(rut[9]) && rut[9]!='k')
	{
		return 0;
	}
	return 1;
}

int cantidadPersonasEnSede(struct Region **arreglo,int codigoSede)
{
	int i,aux;
	struct NodoSede *tmp;

	for(i=0;i<arreglo->pLibre;i++)//recorremos el arreglo de Regiones
	{
		if(buscarSede(arreglo[i]->sede,codigoSede)!=NULL)
		{
			tmp= buscarSede(arreglo[i]->sede,codigoSede);

			aux=cuentaPersonasSede(tmp);
		}
	}
	return aux;
}

int agregarSede(struct Sede *nuevo,struct Nodosede *head)
{
    struct NodoSede *rec;
    rec=head;

    while(rec=!NULL)
    {
        rec=rec->sig;
    }

    rec=crearNodoSede(nuevo,NULL);

    return 1;
}

struct NodoSede *buscarSede(struct NodoSede *head ,int codigo)
{
	struct NodoSede *rec=head;

	if(head!=NULL)
	{
		while(rec!=NULL)
		{
			if(rec->sede->codigoSede==codigo)
			{
				return rec->sede;
			}
			rec=rec->sig;
		}
	}
	return NULL;
}

int cuentaPersonasSede(struct NodoSede *head,codigoSede)
{
	int contador=0;
	struct NodoPersona *rec=head->sede->persona;
	struct NodoSede *cabeza=head;
	while(rec!=NULL && head->sede->codigoSede==codigoSede)
	{	
		
		rec=rec->sig;
		contador++;
	}

	return contador;
}

int cantidadSedeEnRegion(struct Region *arreglo,char region){
	
	struct Region *aux;
	struct NodoSede *rec;
	int cont=0;
	aux=buscarRegion(arreglo,region);
	
	if(aux==NULL)
	{
		return 0;
	}
	else
	{
		for(i=0;i<MAXREGION;i++)
		{
			if(strcmp(region,arreglo[i]->Nombre)==0)
			{
				rec=arreglo[i]->sede;
				while(rec!=NULL)
				{	
					rec=rec->sig;
					cont++;
				}
				return cont;
			}
			
		}
	
}

int cantidadPersonasEnRegion(struct Region *arreglo,char *region)
{
	int contador=0;
	struct NodoSede rec;
	
	for(i=0;i<MAXREGION;i++)
	{
		if(strcmp(region,arreglo[i]->Nombre)==0)
		{
			rec=arreglo[i]->sede;
			
			while(rec!=NULL)
			{
				contador=cuentaPersonasSede(rec,rec->sede->codigoSede) + contador;
				rec=rec->sig;
			}
			return contador;
		}
	}
	return 0,
}
